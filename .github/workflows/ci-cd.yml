name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [18.x, 20.x]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Generate Prisma Client
      run: npx prisma generate
    
    - name: Run linting
      run: npm run lint
    
    - name: Run type checking
      run: npm run type-check
    
    - name: Run tests
      run: npm run test
    
    - name: Build application
      run: npm run build
      env:
        DATABASE_URL: "postgresql://test:test@localhost:5432/test_db?schema=public"
        JWT_SECRET: "test_jwt_secret"
        NEXTAUTH_URL: "http://localhost:3000"

  deploy-staging:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/develop'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Generate Prisma Client
      run: npx prisma generate
    
    - name: Build application
      run: npm run build
      env:
        DATABASE_URL: ${{ secrets.STAGING_DATABASE_URL }}
        JWT_SECRET: ${{ secrets.JWT_SECRET }}
        NEXTAUTH_URL: ${{ secrets.STAGING_URL }}
    
    - name: Deploy to Staging
      run: echo "Deploy to staging environment"
      # Aquí se agregarían los comandos específicos de despliegue

  deploy-production:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Generate Prisma Client
      run: npx prisma generate
    
    - name: Run database migrations
      run: npx prisma migrate deploy
      env:
        DATABASE_URL: ${{ secrets.PRODUCTION_DATABASE_URL }}
    
    - name: Build application
      run: npm run build
      env:
        DATABASE_URL: ${{ secrets.PRODUCTION_DATABASE_URL }}
        JWT_SECRET: ${{ secrets.PRODUCTION_JWT_SECRET }}
        NEXTAUTH_URL: ${{ secrets.PRODUCTION_URL }}
    
    - name: Deploy to Production
      run: echo "Deploy to production environment"
      # Aquí se agregarían los comandos específicos de despliegue
